<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registro - Pesada Balanza</title>
</head>
<body>
    <h1 class="text-center">Registro de Pesaje</h1>
    <form action="/registro" method="POST" onsubmit="calcularNeto()">
        <input type="hidden" name="code" value="<%= code %>">
        <div class="mb-3">
            <label for="idTicket" class="form-label">ID Ticket</label>
            <input type="number" class="form-control" id="idTicket" name="idTicket" value="<%= newIdTicket %>" readonly>
        </div>
        <div class="mb-3">
            <label for="fecha" class="form-label">Fecha</label>
            <input type="date" class="form-control" id="fecha" name="fecha" value="<%= new Date().toISOString().split('T')[0] %>" readonly>
        </div>
        <div class="mb-3">
            <label for="usuario" class="form-label">Usuario</label>
            <input type="text" class="form-control" id="usuario" name="usuario" required>
        </div>
        <div class="mb-3">
            <label for="socio" class="form-label">Socio</label>
            <input type="text" class="form-control" id="socio" name="socio" required>
        </div>
        <div class="mb-3">
            <label for="vehiculo" class="form-label">Vehículo</label>
            <input type="text" class="form-control" id="vehiculo" name="vehiculo" required>
        </div>
        <div class="mb-3">
            <label for="chofer" class="form-label">Chofer</label>
            <input type="text" class="form-control" id="chofer" name="chofer" required>
        </div>
        <div class="mb-3">
            <label for="transporte" class="form-label">Transporte</label>
            <input type="text" class="form-control" id="transporte" name="transporte" required>
        </div>
        <div class="mb-3">
            <label for="tara" class="form-label">Tara (kg)</label>
            <input type="number" class="form-control" id="tara" name="tara" step="0.01" required oninput="calcularNeto()">
        </div>
        <div class="mb-3">
            <label for="bruto" class="form-label">Bruto (kg)</label>
            <input type="number" class="form-control" id="bruto" name="bruto" step="0.01" required oninput="calcularNeto()">
        </div>
        <div class="mb-3">
            <label for="neto" class="form-label">Neto (kg)</label>
            <input type="number" class="form-control" id="neto" name="neto" step="0.01" readonly>
        </div>
        <!-- Lista desplegable para Campo -->
        <div class="mb-3">
            <label for="campo" class="form-label">Campo</label>
            <select class="form-control" id="campo" name="campo" required onchange="updateGranos()">
                <option value="">Seleccione un campo</option>
                <% campos.forEach(campo => { %>
                    <option value="<%= campo %>"><%= campo %></option>
                <% }) %>
            </select>
        </div>
        <!-- Lista desplegable para Grano -->
        <div class="mb-3">
            <label for="grano" class="form-label">Grano</label>
            <select class="form-control" id="grano" name="grano" required onchange="updateLotes()" disabled>
                <option value="">Seleccione un grano</option>
            </select>
        </div>
        <!-- Lista desplegable para Lote -->
        <div class="mb-3">
            <label for="lote" class="form-label">Lote</label>
            <select class="form-control" id="lote" name="lote" required disabled>
                <option value="">Seleccione un lote</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="silobolsa" class="form-label">Silobolsa</label>
            <input type="text" class="form-control" id="silobolsa" name="silobolsa" required>
        </div>
        <button type="submit" class="btn btn-primary">Guardar</button>
    </form>

    <script>
        // Usar los datos pasados desde el servidor
        const datosSiembra = <%- JSON.stringify(datosSiembra) %>;
        
        // Función para actualizar la lista de granos según el campo seleccionado
        function updateGranos() {
            const campoSelect = document.getElementById('campo');
            const granoSelect = document.getElementById('grano');
            const loteSelect = document.getElementById('lote');
            const selectedCampo = campoSelect.value;

            // Limpiar las listas de granos y lotes
            granoSelect.innerHTML = '<option value="">Seleccione un grano</option>';
            loteSelect.innerHTML = '<option value="">Seleccione un lote</option>';
            granoSelect.disabled = true;
            loteSelect.disabled = true;

            if (selectedCampo && datosSiembra[selectedCampo]) {
                // Habilitar la lista de granos y llenarla con los cultivos disponibles
                granoSelect.disabled = false;
                const granos = Object.keys(datosSiembra[selectedCampo]);
                granos.forEach(grano => {
                    const option = document.createElement('option');
                    option.value = grano;
                    option.text = grano;
                    granoSelect.appendChild(option);
                });
            }
        }

        // Función para actualizar la lista de lotes según el campo y grano seleccionados
        function updateLotes() {
            const campoSelect = document.getElementById('campo');
            const granoSelect = document.getElementById('grano');
            const loteSelect = document.getElementById('lote');
            const selectedCampo = campoSelect.value;
            const selectedGrano = granoSelect.value;

            // Limpiar la lista de lotes
            loteSelect.innerHTML = '<option value="">Seleccione un lote</option>';
            loteSelect.disabled = true;

            if (selectedCampo && selectedGrano && datosSiembra[selectedCampo][selectedGrano]) {
                // Habilitar la lista de lotes y llenarla con los lotes disponibles
                loteSelect.disabled = false;
                const lotes = datosSiembra[selectedCampo][selectedGrano];
                lotes.forEach(lote => {
                    const option = document.createElement('option');
                    option.value = lote;
                    option.text = lote;
                    loteSelect.appendChild(option);
                });
            }
        }

        // Función para calcular el neto
        function calcularNeto() {
            const tara = parseFloat(document.getElementById('tara').value) || 0;
            const bruto = parseFloat(document.getElementById('bruto').value) || 0;
            const neto = bruto - tara;
            document.getElementById('neto').value = neto.toFixed(2);
        }
    </script>
</body>
</html>